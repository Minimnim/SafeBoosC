import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.metrics import matthews_corrcoef
from sklearn import metrics
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import GridSearchCV
from hyperopt import STATUS_OK, Trials, fmin, hp, tpe
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import statistics
import warnings
warnings.filterwarnings('ignore')
#to open the file containing the features in columns and each row corresponds to one baby
data = np.genfromtxt('all_transients_together.csv', delimiter=',')
pd.DataFrame(data)
label = np.genfromtxt('all_labels_together.csv', delimiter=',')
ids = data[:,0]
ids = list(dict.fromkeys(ids))
labell = np.genfromtxt('all_labels_together.csv', delimiter=',')
labell = labell[:,1]
colsample_bytree = [ 0.8, 0.9, 1]
max_depth = [4 ,5,  6, 8]
eta = [0.01, 0.05, 0.1]
n_estimators = [50, 100, 200]
scale_pos_weight = [2, 4, 6]
for e in eta:
  for m in max_depth:
    for c in colsample_bytree:
      for p in scale_pos_weight:
        for n in n_estimators:
            outcome =[]
            for x in ids:
              test_data = data[data[:,0] == x]
              train_data = data[data[:,0]!= x]
              test_label = label[label[:,0] == x]
              train_label = label[label[:,0] != x]
              test_x = test_data[:,1:]
              test_y = test_label[:,1]
              train_x = train_data[:,1:]
              train_y = train_label[:,1]
              train = xgb.DMatrix(train_x, label = train_y)
              #test_x = np.array(test_x).reshape((1,-1))
              #test_y = np.array(test_y).reshape((1,-1))
              test = xgb.DMatrix(test_x, label = test_y)
              # param = {'max_depth':m, 'eta':e, 'colsample_bylevel':c,
              #          'scale_pos_weight': p, 'objective':'binary:logistic'}
              param = {'max_depth':m, 'eta':e, 'colsample_bylevel':c,
                       'scale_pos_weight': p, 'objective':'binary:logistic', 'n_estimators':n}
              model = xgb.train(param, train, n)
              prediction = model.predict(test)
              pd.DataFrame(prediction)
              a = statistics.mean(prediction)
              outcome.append(a)
            #print(outcome)
            auc = metrics.roc_auc_score(labell, outcome)
            print(auc,e,m,c,p,n)
